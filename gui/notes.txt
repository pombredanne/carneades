Development Notes for GraphSketch1

(Preliminary Work for the Carneades GUI)

Current version: 0.0.6
Date: July 10, 2008

-----

Current Line of Work: 

* Delete AbstractGraphControl class.

* Save/Load Graph to/from file - Done except for:
	- variable values need to be read as well -> Add property to model class and adjust File load/save
	- use use Jing to validate the file.

* Search List
	- Add final delete

* Solve the xml conformity problem with whitespaces in ids. Use a RE here.

* customize one-jar to get rid of the main-folder in "build"

-----

To Do:

// This is personal for Matthias. The main list is at our launchpad site: http://launchpad.net/carneades

Matthias Grabmair:

* Maybe too much: Protocol changes to a Graph in a (loadable) log so that debugging from externals gets easier
		-> This is essential to debug Undo/Redo as well as new layouts

Tom Gordon:

- The lines/arcs linking the statements of premises to arguments do not contect with the circle representing the argument.  There is a gap.  Is this intentional?

- scroll bars should be visible whenever some part of an argument graph is not visible.  This isn't always the case.

	5. Draw a fine line around the standard, negated and complement fields, with a "proof standard" label, to make it clear that the negated and complement fields are properites of the proof standard, not the statement.  (Nitpick: I prefer "proof standard" to "standard of proof", since it is more compact and also more idiomatic.)

- Idea: replace "negated" and "complement" controls for proof standards with burden of proof controls:  questioning: proponent or opponent; production: proposonent or opponent; persuasion: proponent or opponent.  These controls should then adjust the proof standard behind the scenes accordingly.  Needs further discussion.

-----

Issues to take care of in existing code:

* Refactor GraphControl to better make use of the selectedModels sequence.

* Add a double id check validation on file load because otherwise the file loader will get the premise links wrong. Currently this is no problem if the program only opens files that have been created using it because of the fact that id's are not editable and their automatic creation prevents double occurances.

* The visibility of the EditPanels is currently not bound but updated manually due to an exception happening when selecting the same element twice. Technically this is impossible because there is no bound value involved. Try to fix this at some point.

* Find a way to avoid the Vertex width update in the beginning of the layout.compose() function. Right now it is necessary because the event cannot be triggered.

* Find a better and more universal solution for where to put the invisible tree root. Graph class or CarneadesGraph class? Work over Treelayout accordingly.

* Find a way to assign 0 to the x/y coordinated for the root vertex because they are currently bound to a null pointer object. This is no problem right now because it ends up being zero by default, but this is unclean and might change in future versions of the runtime and/or compiler.

* replace the various compose()-calls on the layout object by an event-trigger when the graph gets altered. Forum post pending here.

* Find a better solution for the Headsize-Problem. Also, currently the Headsize shift only work with upwards links.

* Check whether there is a way to fix the "final variable workaround" in the edge conversion functions of the CarneadesGraph class. This might get fixed in later version of the compiler.

-----

Known Bugs:

-----

General Information:

The current tree layout algorithm runs in O(n^2) time and O(n) space complexity. It does not check neighboring subtrees to align optimally, but rather positions them simply aside from each other. Also, there is no least-space-optimization as it is assumed that the user will want to move around and design the tree at will.

Credit for the basic idea of the tree drawing algorithm go to:

C. Buchheim, M. Junger, and S. Leipert. 
Improving Walker's algorithm to run in linear time. In Proc. Graph Drawing (GD), Lecture notes in computer science, ISSN 0302-9743, 2002.

------

Implementation of the MVC approach:

The model-view-controller (MVC) architecture has been used as follows. The program is divided into three major packages: Argument, Graph and Controller. The argument package contains the model, the graph package the view and the controller package is self-explanatory. Classes in both the controller and graph packages import the argument package to be able to retrieve data to display (graph) and call for alterations (controller). Specifically, the top class "CarneadesGraph" in the graph package binds the ArgumentGraph it contains, thereby updating itself whenever the model changes. Moreover, the controller imports the view package to be able to configure it and maintain the limits of user interactions (e.g. depending on what is selected in the view). 

------

Version history:

0.0.6
Added/modified features:
* Statement search text field is no longer case sensitive.
* Statement edit panel has been worked into new format and outfitted with ne components.
* implemented Color scheme.
* Credits frame added.
* File save/saveAs added.
* Blank toolbar inserted.
* Centered graph upon display.
* 

Fixed Bugs/Issues:
* reappered file save bug fixed again.
* Layout bug fixed in case a single node is wider than the sum of its subtrees.
* Windows platform display bug fixed.

-

0.0.5

Added/modified features:
* Transferred to new compiler and library version.
* Moved update calls to model for cleaner architecture.
* Application runs from .jar now and is hence portable.

Fixed Bugs/Issues:
* Cleaned up public/private/protected attributes and functions due to new compiler version.
* File save works correctly now.

-

0.0.4
Transfer to new argument model.
Updated file loader to cope with the new model.
Added statement list component.
Undo/Redo working.
Dragging working.
Added edit panel.

-

0.0.3
Implemented features:
Create a new argument graph
Save an argument graph to an XML file, using the attached grammar.
Open an argument graph from and XML file.
Add/delete arguments from the graph
Change the type of a premise (ordinary, exception, assumption)	

-

0.0.2
Basic Tree editing functionality.

-

0.0.1
Basic Tree Preview.
