Development Notes for GraphSketch1

(Preliminary Work for the Carneades GUI)

Current version: 0.0.4.2
Date: July 2, 2008

-----

Current Line of Work: 

* Save/Load Graph to/from file - Done except for:
	- variable values need to be read as well -> Add property to model class and adjust File load/save
	- use use Jing to validate the file.

* Search List
	- Add final delete
	- add load/save to extra file

* Transfer to new library version

* Solve the xml conformity problem with whitespaces in ids. Use a RE here.

* Only show ids in search field and replace the TextField by a TextArea in the edit component when available in the SDK.

-----

General to do:


Matthias Grabmair:

* Connect to changing commands once the library provides for an action-attribute in ComboBoxes.

* Why did they get rid of the table-component? -> supposedly to come

* Drag and drop for non-canvas-components are pending.

* Add a scrollbar to the edit and list panels on the right of the window.

* Where are the negated and complement variables in the XML grammar?

* Make it possible to add a statement as a premise to more than one Argument. Figure out a way to do this.

* add a logging feature

* Add outline-checking in the layout algorithm for more compact horizontal positioning.

* Add .jar build target and global target to ant file for one-time call job

* Maybe too much: Protocol changes to a Graph in a (loadable) log so that debugging from externals gets easier
		-> This is essential to debug Undo/Redo as well as new layouts

Tom Gordon:

	- Set the status of a statement (stated, questioned, accepted, rejected)
	- Set the proof standard applicable to a statement (DV, BA, SE)
	- Visualize the acceptabilty of statements in the graph, given this information.
	- Assign argumentation schemes to arguments and roles to premises.
	- Use argumentation schemes as templates when creating new arguments.

-----

Issues to take care of in existing code:

* Refactor GraphControl to better make use of the selectedModels sequence.

* Transfer the do/undo of MoveArgumentCommand into the model.

* Fix window resize problem.

* Add a double id check validation function because otherwise the file loader will get the premise links wrong. Currently this is no problem if the program only opens files that have been created using it because of the fact that id's are not editable and their automatic creation prevents double occurances.

* If GraphEdit.reset() is enabled, a double click on any ArgumentElement hides the edit menu. Fix this.

* The visibility of the EditPanels is currently not bound but updated manually due to an exception happening when selecting the same element twice. Technically this is impossible because there is no bound value involved. Try to fix this at some point.

* The Scrollpane does not support the mouse wheel

* Currently, arguments with conclusion == null are allowed, thereby being non-conform with the grammar.

* Find a way to avoid the Vertex width update in the beginning of the layout.compose() function. Right now it is necessary because the event cannot be triggered.

* Find a better and more universal solution for where to put the invisible tree root. Graph class or CarneadesGraph class? Work over Treelayout accordingly.

* Once a new compiler version comes out, check whether the control.update.start() timeline workaround can be substituted by do {...} blocks.

* Find a way to assign 0 to the x/y coordinated for the root vertex because they are currently bound to a null pointer object. This is no problem right now because it ends up being zero by default, but this is unclean and might change in future versions of the runtime and/or compiler.

* replace the various compose()-calls on the layout object by an event-trigger when the graph gets altered. Forum post pending here.

* Find a better solution for the Headsize-Problem. Also, currently the Headsize shift only work with upwards links.

* Check whether there is a way to fix the "final variable workaround" in the edge conversion functions of the CarneadesGraph class. This might get fixed in later version of the compiler.

-----

Known Bugs:

* Sometimes added arguments produce premise links to the upper left corner. Find some time to reproduce and fix it.

* The edit window sometimes appears only partially when it is closed, some element is selected and then the window is brought to front again.

* When resizing the window, the canvas view component does not scale properly.

* Still, concurrentModificationExceptions appear at startup.

-----

General Information:

The current tree layout algorithm runs in O(n^2) time and O(n) space complexity. It does not check neighboring subtrees to align optimally, but rather positions them simply aside from each other. Also, there is no least-space-optimization as it is assumed that the user will want to move around and design the tree at will.

Credit for the basic idea of the tree drawing algorithm go to:

C. Buchheim, M. Junger, and S. Leipert. 
Improving Walker's algorithm to run in linear time. In Proc. Graph Drawing (GD), Lecture notes in computer science, ISSN 0302-9743, 2002.

------

Implementation of the MVC approach:

The model-view-controller (MVC) architecture has been used as follows. The program is divided into three major packages: Argument, Graph and Controller. The argument package contains the model, the graph package the view and the controller package is self-explanatory. Classes in both the controller and graph packages import the argument package to be able to retrieve data to display (graph) and call for alterations (controller). Specifically, the top class "CarneadesGraph" in the graph package binds the ArgumentGraph it contains, thereby updating itself whenever the model changes. Moreover, the controller imports the view package to be able to configure it and maintain the limits of user interactions (e.g. depending on what is selected in the view). As JavaFX does not supply event listeners by default, the basic graph, layout and controller packages contain "abstract" subpackages, which consist of skeleton-like abstract versions of the main classes with empty methods that the non-abstract classes overide. Hence, the model has an abstract view object whose methods it calls to update the layout. Also, the view has an abstract controller object to which it passes the user interaction. This way, event-based interaction can be substituted by introducing abstract classes and binding them to their respective context. 


------

Version history:


0.0.4
Transfer to new argument model.
Updated file loader to cope with the new model.
Added statement list component.
Undo/Redo working.
Dragging working.
Added edit panel.


0.0.3
Implemented features:
Create a new argument graph
Save an argument graph to an XML file, using the attached grammar.
Open an argument graph from and XML file.
Add/delete arguments from the graph
Change the type of a premise (ordinary, exception, assumption)	


0.0.2
Basic Tree editing functionality.


0.0.1
Basic Tree Preview.
