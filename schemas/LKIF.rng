<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2008 Thomas F. Gordon, Fraunhofer FOKUS, Berlin
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License version 3 (LGPL-3)
  as published by the Free Software Foundation.
  
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for details.
  
  You should have received a copy of the GNU Lesser General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<!-- Version:  2.1 -->
<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <element name="lkif">
      <optional>
        <attribute name="version">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <!-- version of the LKIF schema -->
        <ref name="Sources"/>
      </optional>
      <optional>
        <ref name="Theory"/>
      </optional>
      <optional>
        <ref name="ArgumentGraphs"/>
      </optional>
    </element>
  </start>
  <define name="Sources">
    <element name="sources">
      <oneOrMore>
        <ref name="Source"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Source">
    <element name="source">
      <attribute name="element">
        <data type="anyURI"/>
      </attribute>
      <attribute name="uri">
        <data type="anyURI"/>
      </attribute>
    </element>
  </define>
  <!--
    RDF, OWL and LKIF files can be imported.  See below. 
    The rules are inference rules. The resulting theory is 
    the transitive closure of the axioms deduced using the rules.
  -->
  <define name="Theory">
    <element name="theory">
      <attribute name="id">
        <data type="ID"/>
      </attribute>
      <optional>
        <ref name="Imports"/>
      </optional>
      <optional>
        <ref name="Axioms"/>
      </optional>
      <optional>
        <ref name="Rules"/>
      </optional>
    </element>
  </define>
  <define name="Imports">
    <element name="imports">
      <oneOrMore>
        <ref name="Import"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Axioms">
    <element name="axioms">
      <oneOrMore>
        <ref name="Axiom"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Rules">
    <element name="rules">
      <oneOrMore>
        <ref name="Rule"/>
      </oneOrMore>
    </element>
  </define>
  <!--
    Import: the uri can refer to an RDF file, including OWL files in RDF format, 
    an LKIF theory, an LKIF argument graph, or an entire LKIF file, in which case both the 
    theory and the argument graph in the file are imported. 
    When importing OWL files, not only the axioms of the ontology  
    are imported but also any assertions about instances, the ABox. 
  -->
  <define name="Import">
    <element name="import">
      <attribute name="url">
        <data type="anyURI"/>
      </attribute>
    </element>
  </define>
  <define name="Axiom">
    <element name="axiom">
      <attribute name="id">
        <data type="ID"/>
      </attribute>
      <ref name="Wff"/>
    </element>
  </define>
  <define name="ArgumentGraphs">
    <element name="argument-graphs">
      <oneOrMore>
        <ref name="ArgumentGraph"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Rule">
    <element name="rule">
      <attribute name="id">
        <data type="ID"/>
      </attribute>
      <optional>
        <attribute name="strict">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Head"/>
      <optional>
        <ref name="Domains"/>
      </optional>
      <optional>
        <ref name="Body"/>
      </optional>
    </element>
  </define>
  <define name="Head">
    <element name="head">
      <oneOrMore>
        <ref name="Wff"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Domains">
    <element name="domains">
      <oneOrMore>
        <ref name="Domain"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Domain">
    <choice>
      <ref name="Class"/>
      <ref name="Property"/>
    </choice>
  </define>
  <define name="Body">
    <element name="body">
      <oneOrMore>
        <ref name="Wff"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Class">
    <element name="class">
      <attribute name="pred">
        <data type="anyURI"/>
      </attribute>
      <ref name="Variable"/>
      <optional>
        <text/>
      </optional>
    </element>
  </define>
  <define name="Property">
    <element name="property">
      <attribute name="pred">
        <data type="anyURI"/>
      </attribute>
      <choice>
        <ref name="Variable"/>
        <ref name="Constant"/>
      </choice>
      <optional>
        <text/>
      </optional>
      <ref name="Variable"/>
      <optional>
        <text/>
      </optional>
    </element>
  </define>
  <!--
    Atomic formulas. Propositional logic letters are represented by 
    omitting the (optional) predicate attribute.  The "s" tag
    is used for backwards compatibility and because it is probably
    more intuitive and mnemonic for most users.
    An assumable atom is assumed when an argument having this atom
    as a premise is put forward into an argument graph, unless there is already
    an issue for this atom in which case the value of the assumption attribute of 
    the issue for this atom is 
  -->
  <define name="Atom">
    <element name="s">
      <optional>
        <attribute name="pred">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <zeroOrMore>
        <choice>
          <text/>
          <ref name="Term"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <!--
    Wffs are well-formed formulas of predicate logic, extended with exceptions and assumptions
    Free variables are schema variables, i.e. inference rule variables; 
    bound variables, using Exists or All, are first-order logic variables.
    Wffs may also be variables, i.e. variables may range over Wffs, to
    allow inference rules such as modus ponens to be represented.
  -->
  <define name="Wff">
    <choice>
      <ref name="Atom"/>
      <ref name="Or"/>
      <ref name="And"/>
      <ref name="Not"/>
      <ref name="If"/>
      <ref name="Iff"/>
      <ref name="All"/>
      <ref name="Exists"/>
      <ref name="Variable"/>
    </choice>
  </define>
  <define name="Or">
    <element name="or">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Wff"/>
      <oneOrMore>
        <ref name="Wff"/>
      </oneOrMore>
    </element>
  </define>
  <define name="And">
    <element name="and">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Wff"/>
      <oneOrMore>
        <ref name="Wff"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Not">
    <element name="not">
      <optional>
        <attribute name="exception">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <!-- default: false -->
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Wff"/>
    </element>
  </define>
  <define name="If">
    <element name="if">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Wff"/>
      <ref name="Wff"/>
    </element>
  </define>
  <define name="Iff">
    <element name="iff">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Wff"/>
      <ref name="Wff"/>
    </element>
  </define>
  <define name="All">
    <element name="all">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false -->
      <ref name="Variable"/>
      <ref name="Atom"/>
      <ref name="Wff"/>
    </element>
  </define>
  <define name="Exists">
    <element name="exists">
      <optional>
        <attribute name="assumable">
          <data type="boolean"/>
        </attribute>
      </optional>
      <!-- default: false, -->
      <ref name="Variable"/>
      <ref name="Atom"/>
      <ref name="Wff"/>
    </element>
  </define>
  <!-- Terms include wffs, to support meta-level statements -->
  <define name="Term">
    <choice>
      <ref name="Variable"/>
      <ref name="Individual"/>
      <ref name="Constant"/>
      <ref name="Expression"/>
      <ref name="Wff"/>
    </choice>
  </define>
  <define name="Variable">
    <element name="v">
      <data type="Name"/>
    </element>
  </define>
  <define name="Individual">
    <element name="i">
      <attribute name="value">
        <data type="anyURI"/>
      </attribute>
      <text/>
    </element>
  </define>
  <define name="Constant">
    <element name="c">
      <choice>
        <!-- attribute value { xsd:anySimpleType } -->
        <data type="Name"/>
        <data type="anyURI"/>
        <data type="string"/>
        <data type="boolean"/>
        <data type="integer"/>
        <data type="float"/>
      </choice>
    </element>
  </define>
  <!--
    The functors and constants of expressions are represented by
    URIs. Thus libraries of functions and operators can be
    declared in OWL ontologies.  Standard LKIF functions and operators
    could be part of the ontology of basic legal concepts.
  -->
  <define name="Expression">
    <element name="expr">
      <attribute name="functor">
        <data type="anyURI"/>
      </attribute>
      <zeroOrMore>
        <ref name="Term"/>
      </zeroOrMore>
    </element>
  </define>
  <!--
    In addition to a set of arguments, argument graphs can now include the status
    of issues, applicable proof standards and relative argument strengths.
  -->
  <define name="ArgumentGraph">
    <element name="argument-graph">
      <optional>
        <attribute name="id">
          <data type="ID"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="title">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="main-issue">
          <data type="anyURI"/>
        </attribute>
      </optional>
      <ref name="Statements"/>
      <ref name="Arguments"/>
    </element>
  </define>
  <define name="Statements">
    <element name="statements">
      <oneOrMore>
        <ref name="Statement"/>
      </oneOrMore>
    </element>
  </define>
  <define name="Statement">
    <element name="statement">
      <attribute name="id">
        <data type="ID"/>
      </attribute>
      <optional>
        <attribute name="value">
          <choice>
            <value>unknown</value>
            <value>true</value>
            <value>false</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <!-- default: unknown -->
        <attribute name="assumption">
          <data type="boolean"/>
        </attribute>
      </optional>
      <optional>
        <!-- default: false -->
        <attribute name="standard">
          <choice>
            <value>SE</value>
            <value>DV</value>
            <value>PE</value>
            <value>BRD</value>
            <value>CCE</value>
          </choice>
        </attribute>
      </optional>
      <!-- default: PE -->
      <ref name="Atom"/>
    </element>
  </define>
  <!--
    Schemes and premise roles can be referenced using URIs.  They can be modeled
    as instances in an OWL ontology.
  -->
  <define name="Arguments">
    <element name="arguments">
      <zeroOrMore>
        <ref name="Argument"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Argument">
    <element name="argument">
      <attribute name="id">
        <data type="ID"/>
      </attribute>
      <optional>
        <attribute name="title">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="direction">
          <choice>
            <value>pro</value>
            <value>con</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="scheme">
          <choice>
            <data type="anyURI"/>
            <data type="string"/>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="weight">
          <data type="float"/>
        </attribute>
      </optional>
      <!-- range: 0.0 bis 1.0; default: 0.5 -->
      <ref name="Conclusion"/>
      <ref name="Premises"/>
    </element>
  </define>
  <define name="Premises">
    <element name="premises">
      <zeroOrMore>
        <ref name="Premise"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="Premise">
    <element name="premise">
      <optional>
        <attribute name="polarity">
          <choice>
            <value>positive</value>
            <value>negative</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <!-- default: positive -->
        <attribute name="type">
          <choice>
            <value>ordinary</value>
            <value>exception</value>
            <value>assumption</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <!-- default: ordinary -->
        <attribute name="role">
          <choice>
            <data type="anyURI"/>
            <data type="string"/>
          </choice>
        </attribute>
      </optional>
      <attribute name="statement">
        <data type="anyURI"/>
      </attribute>
    </element>
  </define>
  <define name="Conclusion">
    <element name="conclusion">
      <attribute name="statement">
        <data type="anyURI"/>
      </attribute>
    </element>
  </define>
</grammar>
