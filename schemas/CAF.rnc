# Copyright (C) 2011 Fraunhofer Gesellschaft 
# Licensed under the EUPL V.1.1

# Carneades Argument Format (CAF), Version 1.3
# CAF is based on the argument graph part of 
# the Legal Knowledge Interchange Format (LKIF)
# and may be considered a "reification" of the 
# Argument Interchange Format (AIF).

datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

grammar {
    start = element caf { 
        attribute version { xsd:string }?,  # version of the CAF schema
        Metadata, Statements, Arguments, References
    }
    
    # Simple Dublin Core Elements
    # See: http://en.wikipedia.org/wiki/Dublin_Core
    # Multiple values of all attributes except descriptions
    # are represented in a single string with the values separated
    # by semicolons.
    
    Metadata = element metadata { 
        attribute key { xsd:string }?,  # user defined citation key
        attribute contributor { xsd:string }?,
        attribute coverage { xsd:string }?,
        attribute creator { xsd:string }?,
        attribute date { xsd:string }?,
        attribute format { xsd:string }?,
        attribute identifier { xsd:string }?, # not limited to URIs
        attribute language { xsd:language }?,
        attribute publisher { xsd:string }?,     
        attribute relation { xsd:string }?,
        attribute rights { xsd:string }?, 
        attribute source { xsd:string }?, 
        attribute subject { xsd:string }?, 
        attribute title { xsd:string }?, 
        attribute type { xsd:string }?,    
    	Descriptions?               
    }   
    
    Description = element description {
    	attribute lang { xsd:language },
    	text
    }
    
    Descriptions = element descriptions {
        Description*
    }                                               
    
    Statements = element statements { Statement+ }
    
    Statement = element statement { 
        attribute id { xsd:Name },        # urn:uuid
        attribute weight { xsd:float }?,  # range 0.0 to 1.0, default 0.5
        # weights can be interpreted as an ordinal scale, e.g.
        # 0.0=false, 0.25=assumed false, 0.5=questioned, 0.75=assumed true, 1.00=true
        attribute value { xsd:float }?,   # output of argument evaluation
        attribute standard { "DV" | "PE" | "CCE" | "BRD" }?, # default: PE
        attribute atom { xsd:string }?,   # formalization as Clojure s-expression
        attribute main { xsd:boolean }?,  # default: false, true if a main issue
        Metadata?,       # describing the model
        Descriptions     # natural language expressions of the statement 
    }
             
    Arguments = element arguments { Argument* }
    Argument = element argument { 
    	attribute id { xsd:Name },         # urn:uuid
    	attribute strict { xsd:boolean }?, # default false
        attribute pro { xsd:boolean }?,    # default true; false if con
        attribute scheme { xsd:anyURI | xsd:string }?,
        attribute weight { xsd:float }?,  # range: 0.0 to 1.0; default: 0.5
        attribute value { xsd:float }?,   # output of argument evaluation
        Metadata?,                        # describing the model
        Conclusion, 
        Premises
    }
    
    Premises = element premises { Premise* }
    
    Premise = element premise { 
        attribute positive { xsd:boolean }?, # default: true
        attribute role { xsd:string }?,
        attribute implicit { xsd:boolean}?,   # default: false
        attribute statement { xsd:anyURI }
     } 
                  
    Conclusion = element conclusion { 
        attribute statement { xsd:anyURI }
	}
	
    References = element references { Metadata* }
}