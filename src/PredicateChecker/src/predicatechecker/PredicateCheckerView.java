/*
 * PredicateCheckerView.java
 */

package predicatechecker;

import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 * The application's main frame.
 */
public class PredicateCheckerView extends FrameView {

    private class Sources {
        public Set<String> sources = new HashSet<String>();
    }

    public PredicateCheckerView(SingleFrameApplication app) {
        super(app);

        initComponents();
        
        updateList();

    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PredicateCheckerApp.getApplication().getMainFrame();
            aboutBox = new PredicateCheckerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PredicateCheckerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        predicateList = new javax.swing.JList();
        nsCheckBox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        importLKIFMenuItem = new javax.swing.JMenuItem();
        importOWLMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        clearMenuItem = new javax.swing.JMenuItem();
        levenshteinMenuItem = new javax.swing.JMenuItem();
        configMenu = new javax.swing.JMenu();
        setLevMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        listPopupMenu = new javax.swing.JPopupMenu();
        levPopupMenuItem = new javax.swing.JMenuItem();
        sourceMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(predicatechecker.PredicateCheckerApp.class).getContext().getResourceMap(PredicateCheckerView.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        predicateList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        predicateList.setComponentPopupMenu(listPopupMenu);
        predicateList.setName("predicateList"); // NOI18N
        jScrollPane1.setViewportView(predicateList);

        nsCheckBox.setText(resourceMap.getString("nsCheckBox.text")); // NOI18N
        nsCheckBox.setName("nsCheckBox"); // NOI18N
        nsCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nsCheckBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 668, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(nsCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nsCheckBox)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        importLKIFMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        importLKIFMenuItem.setText(resourceMap.getString("importLKIFMenuItem.text")); // NOI18N
        importLKIFMenuItem.setName("importLKIFMenuItem"); // NOI18N
        importLKIFMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importLKIFMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importLKIFMenuItem);

        importOWLMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        importOWLMenuItem.setText(resourceMap.getString("importOWLMenuItem.text")); // NOI18N
        importOWLMenuItem.setName("importOWLMenuItem"); // NOI18N
        importOWLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importOWLMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importOWLMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        fileMenu.add(jSeparator2);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(predicatechecker.PredicateCheckerApp.class).getContext().getActionMap(PredicateCheckerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        clearMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        clearMenuItem.setText(resourceMap.getString("clearMenuItem.text")); // NOI18N
        clearMenuItem.setName("clearMenuItem"); // NOI18N
        clearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(clearMenuItem);

        levenshteinMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        levenshteinMenuItem.setText(resourceMap.getString("levenshteinMenuItem.text")); // NOI18N
        levenshteinMenuItem.setName("levenshteinMenuItem"); // NOI18N
        levenshteinMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levenshteinMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(levenshteinMenuItem);

        menuBar.add(editMenu);

        configMenu.setText(resourceMap.getString("configMenu.text")); // NOI18N
        configMenu.setName("configMenu"); // NOI18N

        setLevMenuItem.setText(resourceMap.getString("setLevMenuItem.text")); // NOI18N
        setLevMenuItem.setName("setLevMenuItem"); // NOI18N
        setLevMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLevMenuItemActionPerformed(evt);
            }
        });
        configMenu.add(setLevMenuItem);

        menuBar.add(configMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        statusLabel.setText(resourceMap.getString("statusLabel.text")); // NOI18N
        statusLabel.setName("statusLabel"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 546, Short.MAX_VALUE)
                .addComponent(statusAnimationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusMessageLabel)
                            .addComponent(statusAnimationLabel))
                        .addGap(3, 3, 3))
                    .addComponent(statusLabel)))
        );

        jSeparator1.setName("jSeparator1"); // NOI18N

        listPopupMenu.setName("listPopupMenu"); // NOI18N

        levPopupMenuItem.setText(resourceMap.getString("levPopupMenuItem.text")); // NOI18N
        levPopupMenuItem.setName("levPopupMenuItem"); // NOI18N
        levPopupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                levPopupMenuItemActionPerformed(evt);
            }
        });
        listPopupMenu.add(levPopupMenuItem);

        sourceMenuItem.setText(resourceMap.getString("sourceMenuItem.text")); // NOI18N
        sourceMenuItem.setName("sourceMenuItem"); // NOI18N
        sourceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourceMenuItemActionPerformed(evt);
            }
        });
        listPopupMenu.add(sourceMenuItem);

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void importLKIFMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importLKIFMenuItemActionPerformed

        fileChooser.setFileFilter(allFilter);
        fileChooser.addChoosableFileFilter(lkifFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        int openVal = fileChooser.showOpenDialog(this.getFrame());

        if(JFileChooser.APPROVE_OPTION == openVal) {
            File f = fileChooser.getSelectedFile();
            Set<String> newPreds = LKIFHelper.getPredicatesFromLKIF(f);
            predicates.addAll(newPreds);
            for(String p : newPreds) {
                Sources s = predicateSources.get(p);
                if(s != null) {
                    s.sources.add(f.getAbsolutePath());
                } else {
                    s = new Sources();
                    s.sources.add(f.getAbsolutePath());
                    predicateSources.put(p, s);
                }
            }
            updateList();
        }

    }//GEN-LAST:event_importLKIFMenuItemActionPerformed

    private void nsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nsCheckBoxItemStateChanged
        //if(evt.getStateChange() == ItemEvent.DESELECTED) {
            updateList();
        //}
    }//GEN-LAST:event_nsCheckBoxItemStateChanged

    private void importOWLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importOWLMenuItemActionPerformed
        fileChooser.setFileFilter(allFilter);
        fileChooser.addChoosableFileFilter(owlFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);
        int openVal = fileChooser.showOpenDialog(this.getFrame());

        if(JFileChooser.APPROVE_OPTION == openVal) {
            File f = fileChooser.getSelectedFile();
            Set<String> newPreds = OWLHelper.getPredicatesFromOWL(f);
            predicates.addAll(newPreds);
            for(String p : newPreds) {
                Sources s = predicateSources.get(p);
                if(s != null) {
                    s.sources.add(f.getAbsolutePath());
                } else {
                    s = new Sources();
                    s.sources.add(f.getAbsolutePath());
                    predicateSources.put(p, s);
                }
            }
            updateList();
        }
    }//GEN-LAST:event_importOWLMenuItemActionPerformed

    private void clearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMenuItemActionPerformed
        this.predicates = new HashSet<String>();
        updateList();
    }//GEN-LAST:event_clearMenuItemActionPerformed

    private void levenshteinMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levenshteinMenuItemActionPerformed
        ListModel listModel = predicateList.getModel();
        predicateList.clearSelection();
        List<Integer> selectionList = new ArrayList<Integer>();              
        for(int i=0; i<listModel.getSize(); i++) {
            String p1 = (String)listModel.getElementAt(i);
            for(int j=i+1; j<listModel.getSize(); j++) {
                String p2 = (String)listModel.getElementAt(j);
                int dist = Levenshtein.getLevenshteinDistance(p1, p2);
                if(maxLevDist >= dist) {
                    selectionList.add(i);
                    selectionList.add(j);
                }
            }
        }
        int[] indices = new int[selectionList.size()];
        for(int i=0; i<indices.length; i++) {
            indices[i] = selectionList.get(i);
        }
        predicateList.setSelectedIndices(indices);
        JOptionPane.showMessageDialog(this.getFrame(), "Number of predicates selected: " + Integer.toString(selectionList.size()), "Levenshtein", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_levenshteinMenuItemActionPerformed

    private void levPopupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_levPopupMenuItemActionPerformed
        String pred = (String)predicateList.getSelectedValue();
        ListModel listModel = predicateList.getModel();
        predicateList.clearSelection();
        List<Integer> selectionList = new ArrayList<Integer>();        
        for(int i=0; i<listModel.getSize(); i++) {
            String p2 = (String)listModel.getElementAt(i);
            int dist = Levenshtein.getLevenshteinDistance(pred, p2);
            if(maxLevDist >= dist) {
                selectionList.add(i);
            }
        }
        int[] indices = new int[selectionList.size()];
        for(int i=0; i<indices.length; i++) {
            indices[i] = selectionList.get(i);
        }
        predicateList.setSelectedIndices(indices);
        JOptionPane.showMessageDialog(this.getFrame(), "Number of predicates selected: " + Integer.toString(selectionList.size()), "Levenshtein", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_levPopupMenuItemActionPerformed

    private void setLevMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLevMenuItemActionPerformed
        String a = (String)JOptionPane.showInputDialog(this.getFrame(), "Set maximum distance", "Levenshtein", JOptionPane.QUESTION_MESSAGE, null, null, maxLevDist);
        try {
            maxLevDist = Integer.parseInt(a);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this.getFrame(), "Not an integer: "+a, "Error" , JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_setLevMenuItemActionPerformed

    private void sourceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourceMenuItemActionPerformed
        String pred = (String)predicateList.getSelectedValue();
        Sources s = predicateSources.get(pred);
        if(s != null) {
            StringBuilder t = new StringBuilder();
            for(String f : s.sources) {
                t.append(f);
                t.append("\n");
            }
            JOptionPane.showMessageDialog(this.getFrame(), t, "Sources", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this.getFrame(), "No source found!", "Sources", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sourceMenuItemActionPerformed

    private void updateList() {
        List<String> sortedPredicates = new ArrayList<String>();
        for(String pred : this.predicates) {
            sortedPredicates.add(pred);
        }
        Collections.sort(sortedPredicates, new StringComparator());
        DefaultListModel listModel = new DefaultListModel();
        for(String pred : sortedPredicates) {
            if(nsCheckBox.isSelected()) {
                try {
                    URI uri = new URI(pred);
                    String fragment = uri.getFragment();
                    if(fragment!=null) {
                        listModel.addElement(fragment);
                    } else {
                        listModel.addElement(pred);
                    }
                } catch (Exception e) {
                    System.out.println("no uri: "+pred);
                    listModel.addElement(pred);
                }
            } else {
                listModel.addElement(pred);
            }
        }
        predicateList.setModel(listModel);
        statusLabel.setText("Number of Predicates: "+Integer.toString(predicates.size()));        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearMenuItem;
    private javax.swing.JMenu configMenu;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem importLKIFMenuItem;
    private javax.swing.JMenuItem importOWLMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem levPopupMenuItem;
    private javax.swing.JMenuItem levenshteinMenuItem;
    private javax.swing.JPopupMenu listPopupMenu;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBox nsCheckBox;
    private javax.swing.JList predicateList;
    private javax.swing.JMenuItem setLevMenuItem;
    private javax.swing.JMenuItem sourceMenuItem;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final JFileChooser fileChooser = new JFileChooser();
    private final SimpleFilter lkifFilter = new SimpleFilter("LKIF Files", new String[]{"lkif", "xml"});
    private final SimpleFilter owlFilter = new SimpleFilter("OWL Files", new String[]{"owl"});
    private final SimpleFilter allFilter = new SimpleFilter("All Files", null);

    private Set<String> predicates = new HashSet<String>();
    private Map<String, Sources> predicateSources = new HashMap<String, Sources>();
    private int maxLevDist = 1;


    private JDialog aboutBox;    

}
