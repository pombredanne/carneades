/*
 * TranslationGUIView.java
 */

package org.fokus.carneades.translationgui;

import java.awt.event.ItemEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

/**
 * The application's main frame.
 */
public class TranslationGUIView extends FrameView  implements DocumentListener{

    public TranslationGUIView(SingleFrameApplication app){
        super(app);

        initComponents();
        this.getFrame().setTitle("TranslationGUI");
        this.stmtDoc = statementFormatTextField.getDocument();
        this.questionDoc = questionFormatTextField.getDocument();
        this.hintDoc = questionHintTextArea.getDocument();
        this.categoryDoc = questionCategoryTextField.getDocument();
        statementFormatTextField.getDocument().addDocumentListener(this);
        questionFormatTextField.getDocument().addDocumentListener(this);
        questionHintTextArea.getDocument().addDocumentListener(this);
        questionCategoryTextField.getDocument().addDocumentListener(this);
        
        questionTypeComboBox.removeAllItems();
        questionTypeComboBox.addItem("text");
        questionTypeComboBox.addItem("select");
        questionTypeComboBox.addItem("radio");
        questionTypeComboBox.addItem("checkbox");
        questionTypeComboBox.addItem("date");
        questionTypeComboBox.addItem("int");
        questionTypeComboBox.addItem("float");        
        
        fileChooser = new JFileChooser();
        
        statementArgsList.setDragEnabled(true);
        statementArgsList.setDropMode(DropMode.INSERT);
        statementArgsList.setTransferHandler(new ListTransferHandler(statementArgsList));
                
        questionArgsList.setDragEnabled(true);
        questionArgsList.setDropMode(DropMode.INSERT);
        questionArgsList.setTransferHandler(new ListTransferHandler(questionArgsList));       
        
        questionRefArgOrderList.setDragEnabled(true);
        questionRefArgOrderList.setDropMode(DropMode.INSERT);
        questionRefArgOrderList.setTransferHandler(new ListTransferHandler(questionRefArgOrderList));
        
        updateStmt();
        updateQuestion();
        updateMenuItems();
        
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = TranslationGUIApp.getApplication().getMainFrame();
            aboutBox = new TranslationGUIAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        TranslationGUIApp.getApplication().show(aboutBox);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mainSplitPane = new javax.swing.JSplitPane();
        leftSidePanel = new javax.swing.JPanel();
        predicateScrollPane = new javax.swing.JScrollPane();
        predicateList = new javax.swing.JList();
        predicatesNamespacesCheckBox = new javax.swing.JCheckBox();
        PredicateTabbedPane = new javax.swing.JTabbedPane();
        statementPanel = new javax.swing.JPanel();
        statementLanguageComboBox = new javax.swing.JComboBox();
        statementLanguageLabel = new javax.swing.JLabel();
        statementFormatLabel = new javax.swing.JLabel();
        statementFormatTextField = new javax.swing.JTextField();
        statementArgsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        statementArgsList = new javax.swing.JList();
        statementFormatStringLabel = new javax.swing.JLabel();
        questionsPanel = new javax.swing.JPanel();
        questionFormatPanel = new javax.swing.JPanel();
        questionLanguageComboBox = new javax.swing.JComboBox();
        questionFormatLabel = new javax.swing.JLabel();
        questionFormatTextField = new javax.swing.JTextField();
        questionArgsLabel = new javax.swing.JLabel();
        questionArgsOrderScrollPane = new javax.swing.JScrollPane();
        questionArgsList = new javax.swing.JList();
        questionFormatStringLabel = new javax.swing.JLabel();
        questionArgPanel = new javax.swing.JPanel();
        questionNrLabel = new javax.swing.JLabel();
        questionArgComboBox = new javax.swing.JComboBox();
        typePanel = new javax.swing.JPanel();
        questionTypeComboBox = new javax.swing.JComboBox();
        categoryPanel = new javax.swing.JPanel();
        questionCategoryTextField = new javax.swing.JTextField();
        answersPanel = new javax.swing.JPanel();
        answersScrollPane = new javax.swing.JScrollPane();
        questionAnswersList = new javax.swing.JList();
        hintPanel = new javax.swing.JPanel();
        hintScrollPane = new javax.swing.JScrollPane();
        questionHintTextArea = new javax.swing.JTextArea();
        refsPanel = new javax.swing.JPanel();
        refsScrollPane = new javax.swing.JScrollPane();
        questionRefsList = new javax.swing.JList();
        questionRefArgSpinner = new javax.swing.JSpinner();
        questionRefsArgOrderjLabel2 = new javax.swing.JLabel();
        questionRefArgLabel = new javax.swing.JLabel();
        refsArgScrollPane = new javax.swing.JScrollPane();
        questionRefArgOrderList = new javax.swing.JList();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        addQuestionMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        stmtLangMenuItem = new javax.swing.JMenuItem();
        questionLangMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        questionAnswersPopupMenu = new javax.swing.JPopupMenu();
        addAnswerMenuItem = new javax.swing.JMenuItem();
        removeAnswerMenuItem = new javax.swing.JMenuItem();
        questionRefsPopupMenu = new javax.swing.JPopupMenu();
        addRefMenuItem = new javax.swing.JMenuItem();
        removeRefMenuItem = new javax.swing.JMenuItem();
        predicatesPopupMenu = new javax.swing.JPopupMenu();
        addPredicateMenuItem = new javax.swing.JMenuItem();
        removePredicateMenuItem = new javax.swing.JMenuItem();

        mainPanel.setName("mainPanel"); // NOI18N

        mainSplitPane.setBorder(null);
        mainSplitPane.setName("mainSplitPane"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(org.fokus.carneades.translationgui.TranslationGUIApp.class).getContext().getResourceMap(TranslationGUIView.class);
        leftSidePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("leftSidePanel.border.title"))); // NOI18N
        leftSidePanel.setName("leftSidePanel"); // NOI18N

        predicateScrollPane.setName("predicateScrollPane"); // NOI18N

        predicateList.setComponentPopupMenu(predicatesPopupMenu);
        predicateList.setName("predicateList"); // NOI18N
        predicateList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                predicateListValueChanged(evt);
            }
        });
        predicateScrollPane.setViewportView(predicateList);

        predicatesNamespacesCheckBox.setText(resourceMap.getString("predicatesNamespacesCheckBox.text")); // NOI18N
        predicatesNamespacesCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        predicatesNamespacesCheckBox.setName("predicatesNamespacesCheckBox"); // NOI18N

        javax.swing.GroupLayout leftSidePanelLayout = new javax.swing.GroupLayout(leftSidePanel);
        leftSidePanel.setLayout(leftSidePanelLayout);
        leftSidePanelLayout.setHorizontalGroup(
            leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(predicateScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(predicatesNamespacesCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        leftSidePanelLayout.setVerticalGroup(
            leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(predicateScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(predicatesNamespacesCheckBox)
                .addContainerGap())
        );

        mainSplitPane.setLeftComponent(leftSidePanel);

        PredicateTabbedPane.setName("PredicateTabbedPane"); // NOI18N

        statementPanel.setName("statementPanel"); // NOI18N

        statementLanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "German" }));
        statementLanguageComboBox.setName("statementLanguageComboBox"); // NOI18N
        statementLanguageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                statementLanguageComboBoxItemStateChanged(evt);
            }
        });

        statementLanguageLabel.setText(resourceMap.getString("statementLanguageLabel.text")); // NOI18N
        statementLanguageLabel.setName("statementLanguageLabel"); // NOI18N

        statementFormatLabel.setText(resourceMap.getString("statementFormatLabel.text")); // NOI18N
        statementFormatLabel.setName("statementFormatLabel"); // NOI18N

        statementFormatTextField.setText(resourceMap.getString("statementFormatTextField.text")); // NOI18N
        statementFormatTextField.setName("statementFormatTextField"); // NOI18N

        statementArgsLabel.setText(resourceMap.getString("statementArgsLabel.text")); // NOI18N
        statementArgsLabel.setName("statementArgsLabel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        statementArgsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "0", "1", "2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        statementArgsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        statementArgsList.setDragEnabled(true);
        statementArgsList.setDropMode(javax.swing.DropMode.INSERT);
        statementArgsList.setName("statementArgsList"); // NOI18N
        statementArgsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                statementArgsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(statementArgsList);

        statementFormatStringLabel.setText(resourceMap.getString("statementFormatStringLabel.text")); // NOI18N
        statementFormatStringLabel.setName("statementFormatStringLabel"); // NOI18N

        javax.swing.GroupLayout statementPanelLayout = new javax.swing.GroupLayout(statementPanel);
        statementPanel.setLayout(statementPanelLayout);
        statementPanelLayout.setHorizontalGroup(
            statementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(statementLanguageLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statementLanguageComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 593, Short.MAX_VALUE)
                    .addComponent(statementFormatLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statementFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(statementArgsLabel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statementFormatStringLabel, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        statementPanelLayout.setVerticalGroup(
            statementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statementPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statementLanguageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statementLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statementFormatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statementFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(statementArgsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statementFormatStringLabel)
                .addContainerGap())
        );

        PredicateTabbedPane.addTab(resourceMap.getString("statementPanel.TabConstraints.tabTitle"), statementPanel); // NOI18N

        questionsPanel.setName("questionsPanel"); // NOI18N

        questionFormatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("questionFormatPanel.border.title"))); // NOI18N
        questionFormatPanel.setName("questionFormatPanel"); // NOI18N

        questionLanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English", "German" }));
        questionLanguageComboBox.setName("questionLanguageComboBox"); // NOI18N
        questionLanguageComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                questionLanguageComboBoxItemStateChanged(evt);
            }
        });

        questionFormatLabel.setText(resourceMap.getString("questionFormatLabel.text")); // NOI18N
        questionFormatLabel.setName("questionFormatLabel"); // NOI18N

        questionFormatTextField.setText(resourceMap.getString("questionFormatTextField.text")); // NOI18N
        questionFormatTextField.setName("questionFormatTextField"); // NOI18N

        questionArgsLabel.setText(resourceMap.getString("questionArgsLabel.text")); // NOI18N
        questionArgsLabel.setName("questionArgsLabel"); // NOI18N

        questionArgsOrderScrollPane.setName("questionArgsOrderScrollPane"); // NOI18N

        questionArgsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "1", "2" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        questionArgsList.setName("questionArgsList"); // NOI18N
        questionArgsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                questionArgsListValueChanged(evt);
            }
        });
        questionArgsOrderScrollPane.setViewportView(questionArgsList);

        questionFormatStringLabel.setText(resourceMap.getString("questionFormatStringLabel.text")); // NOI18N
        questionFormatStringLabel.setName("questionFormatStringLabel"); // NOI18N

        javax.swing.GroupLayout questionFormatPanelLayout = new javax.swing.GroupLayout(questionFormatPanel);
        questionFormatPanel.setLayout(questionFormatPanelLayout);
        questionFormatPanelLayout.setHorizontalGroup(
            questionFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionLanguageComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 561, Short.MAX_VALUE)
                    .addComponent(questionFormatLabel)
                    .addComponent(questionFormatTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addGroup(questionFormatPanelLayout.createSequentialGroup()
                        .addComponent(questionArgsLabel)
                        .addGap(18, 18, 18)
                        .addComponent(questionArgsOrderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE))
                    .addComponent(questionFormatStringLabel))
                .addContainerGap())
        );
        questionFormatPanelLayout.setVerticalGroup(
            questionFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionFormatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(questionFormatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionFormatTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(questionFormatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionArgsLabel)
                    .addComponent(questionArgsOrderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionFormatStringLabel)
                .addContainerGap())
        );

        questionArgPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("questionArgPanel.border.title"))); // NOI18N
        questionArgPanel.setName("questionArgPanel"); // NOI18N

        questionNrLabel.setText(resourceMap.getString("questionNrLabel.text")); // NOI18N
        questionNrLabel.setName("questionNrLabel"); // NOI18N

        questionArgComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        questionArgComboBox.setName("questionArgComboBox"); // NOI18N
        questionArgComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                questionArgComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout questionArgPanelLayout = new javax.swing.GroupLayout(questionArgPanel);
        questionArgPanel.setLayout(questionArgPanelLayout);
        questionArgPanelLayout.setHorizontalGroup(
            questionArgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionArgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionArgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(questionArgComboBox, 0, 561, Short.MAX_VALUE)
                    .addComponent(questionNrLabel))
                .addContainerGap())
        );
        questionArgPanelLayout.setVerticalGroup(
            questionArgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionArgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionArgComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(questionNrLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        typePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("typePanel.border.title"))); // NOI18N
        typePanel.setName("typePanel"); // NOI18N

        questionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        questionTypeComboBox.setName("questionTypeComboBox"); // NOI18N
        questionTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                questionTypeComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout typePanelLayout = new javax.swing.GroupLayout(typePanel);
        typePanel.setLayout(typePanelLayout);
        typePanelLayout.setHorizontalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionTypeComboBox, 0, 561, Short.MAX_VALUE)
                .addContainerGap())
        );
        typePanelLayout.setVerticalGroup(
            typePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        categoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("categoryPanel.border.title"))); // NOI18N
        categoryPanel.setName("categoryPanel"); // NOI18N

        questionCategoryTextField.setText(resourceMap.getString("questionCategoryTextField.text")); // NOI18N
        questionCategoryTextField.setName("questionCategoryTextField"); // NOI18N

        javax.swing.GroupLayout categoryPanelLayout = new javax.swing.GroupLayout(categoryPanel);
        categoryPanel.setLayout(categoryPanelLayout);
        categoryPanelLayout.setHorizontalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, categoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionCategoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                .addContainerGap())
        );
        categoryPanelLayout.setVerticalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionCategoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        answersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("answersPanel.border.title"))); // NOI18N
        answersPanel.setName("answersPanel"); // NOI18N

        answersScrollPane.setName("answersScrollPane"); // NOI18N

        questionAnswersList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        questionAnswersList.setComponentPopupMenu(questionAnswersPopupMenu);
        questionAnswersList.setName("questionAnswersList"); // NOI18N
        answersScrollPane.setViewportView(questionAnswersList);

        javax.swing.GroupLayout answersPanelLayout = new javax.swing.GroupLayout(answersPanel);
        answersPanel.setLayout(answersPanelLayout);
        answersPanelLayout.setHorizontalGroup(
            answersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(answersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(answersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                .addContainerGap())
        );
        answersPanelLayout.setVerticalGroup(
            answersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, answersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(answersScrollPane)
                .addContainerGap())
        );

        hintPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("hintPanel.border.title"))); // NOI18N
        hintPanel.setName("hintPanel"); // NOI18N

        hintScrollPane.setName("hintScrollPane"); // NOI18N

        questionHintTextArea.setColumns(20);
        questionHintTextArea.setRows(5);
        questionHintTextArea.setName("questionHintTextArea"); // NOI18N
        hintScrollPane.setViewportView(questionHintTextArea);

        javax.swing.GroupLayout hintPanelLayout = new javax.swing.GroupLayout(hintPanel);
        hintPanel.setLayout(hintPanelLayout);
        hintPanelLayout.setHorizontalGroup(
            hintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 233, Short.MAX_VALUE)
            .addGroup(hintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(hintPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(hintScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        hintPanelLayout.setVerticalGroup(
            hintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 152, Short.MAX_VALUE)
            .addGroup(hintPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hintPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(hintScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addGap(8, 8, 8)))
        );

        refsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("refsPanel.border.title"))); // NOI18N
        refsPanel.setName("refsPanel"); // NOI18N

        refsScrollPane.setName("refsScrollPane"); // NOI18N

        questionRefsList.setComponentPopupMenu(questionRefsPopupMenu);
        questionRefsList.setName("questionRefsList"); // NOI18N
        questionRefsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                questionRefsListMouseClicked(evt);
            }
        });
        questionRefsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                questionRefsListValueChanged(evt);
            }
        });
        refsScrollPane.setViewportView(questionRefsList);

        questionRefArgSpinner.setName("questionRefArgSpinner"); // NOI18N
        questionRefArgSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                questionRefArgSpinnerStateChanged(evt);
            }
        });

        questionRefsArgOrderjLabel2.setText(resourceMap.getString("questionRefsArgOrderjLabel2.text")); // NOI18N
        questionRefsArgOrderjLabel2.setName("questionRefsArgOrderjLabel2"); // NOI18N

        questionRefArgLabel.setText(resourceMap.getString("questionRefArgLabel.text")); // NOI18N
        questionRefArgLabel.setName("questionRefArgLabel"); // NOI18N

        refsArgScrollPane.setName("refsArgScrollPane"); // NOI18N

        questionRefArgOrderList.setName("questionRefArgOrderList"); // NOI18N
        questionRefArgOrderList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                questionRefArgOrderListValueChanged(evt);
            }
        });
        refsArgScrollPane.setViewportView(questionRefArgOrderList);

        javax.swing.GroupLayout refsPanelLayout = new javax.swing.GroupLayout(refsPanel);
        refsPanel.setLayout(refsPanelLayout);
        refsPanelLayout.setHorizontalGroup(
            refsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(refsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(refsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(refsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refsArgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addGroup(refsPanelLayout.createSequentialGroup()
                        .addComponent(questionRefArgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(questionRefArgSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                    .addComponent(questionRefsArgOrderjLabel2))
                .addContainerGap())
        );
        refsPanelLayout.setVerticalGroup(
            refsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, refsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(refsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addGroup(refsPanelLayout.createSequentialGroup()
                        .addGroup(refsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(questionRefArgLabel)
                            .addComponent(questionRefArgSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(questionRefsArgOrderjLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refsArgScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout questionsPanelLayout = new javax.swing.GroupLayout(questionsPanel);
        questionsPanel.setLayout(questionsPanelLayout);
        questionsPanelLayout.setHorizontalGroup(
            questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, questionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(refsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(categoryPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(questionArgPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, questionsPanelLayout.createSequentialGroup()
                        .addComponent(answersPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(questionFormatPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        questionsPanelLayout.setVerticalGroup(
            questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(questionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionArgPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionFormatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(questionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(hintPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(answersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        PredicateTabbedPane.addTab(resourceMap.getString("questionsPanel.TabConstraints.tabTitle"), questionsPanel); // NOI18N

        mainSplitPane.setRightComponent(PredicateTabbedPane);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 925, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText(resourceMap.getString("openMenuItem.text")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText(resourceMap.getString("saveMenuItem.text")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        fileMenu.add(jSeparator1);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(org.fokus.carneades.translationgui.TranslationGUIApp.class).getContext().getActionMap(TranslationGUIView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText(resourceMap.getString("editMenu.text")); // NOI18N
        editMenu.setName("editMenu"); // NOI18N

        addQuestionMenuItem.setText(resourceMap.getString("addQuestionMenuItem.text")); // NOI18N
        addQuestionMenuItem.setName("addQuestionMenuItem"); // NOI18N
        addQuestionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestionMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(addQuestionMenuItem);

        jSeparator2.setName("jSeparator2"); // NOI18N
        editMenu.add(jSeparator2);

        stmtLangMenuItem.setText(resourceMap.getString("stmtLangMenuItem.text")); // NOI18N
        stmtLangMenuItem.setName("stmtLangMenuItem"); // NOI18N
        stmtLangMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stmtLangMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(stmtLangMenuItem);

        questionLangMenuItem.setText(resourceMap.getString("questionLangMenuItem.text")); // NOI18N
        questionLangMenuItem.setName("questionLangMenuItem"); // NOI18N
        questionLangMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionLangMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(questionLangMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        questionAnswersPopupMenu.setName("questionAnswersPopupMenu"); // NOI18N

        addAnswerMenuItem.setText(resourceMap.getString("addAnswerMenuItem.text")); // NOI18N
        addAnswerMenuItem.setName("addAnswerMenuItem"); // NOI18N
        addAnswerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnswerMenuItemActionPerformed(evt);
            }
        });
        questionAnswersPopupMenu.add(addAnswerMenuItem);

        removeAnswerMenuItem.setText(resourceMap.getString("removeAnswerMenuItem.text")); // NOI18N
        removeAnswerMenuItem.setName("removeAnswerMenuItem"); // NOI18N
        removeAnswerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAnswerMenuItemActionPerformed(evt);
            }
        });
        questionAnswersPopupMenu.add(removeAnswerMenuItem);

        questionRefsPopupMenu.setName("questionRefsPopupMenu"); // NOI18N

        addRefMenuItem.setText(resourceMap.getString("addRefMenuItem.text")); // NOI18N
        addRefMenuItem.setName("addRefMenuItem"); // NOI18N
        addRefMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRefMenuItemActionPerformed(evt);
            }
        });
        questionRefsPopupMenu.add(addRefMenuItem);

        removeRefMenuItem.setText(resourceMap.getString("removeRefMenuItem.text")); // NOI18N
        removeRefMenuItem.setName("removeRefMenuItem"); // NOI18N
        removeRefMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRefMenuItemActionPerformed(evt);
            }
        });
        questionRefsPopupMenu.add(removeRefMenuItem);

        predicatesPopupMenu.setName("predicatesPopupMenu"); // NOI18N

        addPredicateMenuItem.setText(resourceMap.getString("addPredicateMenuItem.text")); // NOI18N
        addPredicateMenuItem.setName("addPredicateMenuItem"); // NOI18N
        addPredicateMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPredicateMenuItemActionPerformed(evt);
            }
        });
        predicatesPopupMenu.add(addPredicateMenuItem);

        removePredicateMenuItem.setText(resourceMap.getString("removePredicateMenuItem.text")); // NOI18N
        removePredicateMenuItem.setName("removePredicateMenuItem"); // NOI18N
        predicatesPopupMenu.add(removePredicateMenuItem);

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        
        int openVal = fileChooser.showOpenDialog(this.getFrame());
        if(openVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            this.getFrame().setTitle("TranslationGUI <"+f.getAbsolutePath()+">");
            this.predicates = TranslationImporter.importTranslations(f);
            DefaultListModel listModel = new DefaultListModel();
            for(Predicate p : this.predicates) {
                listModel.addElement(p.getPred());
            }
            predicateList.setModel(listModel);
            statementLanguageComboBox.removeAllItems();
            questionLanguageComboBox.removeAllItems();
            /*for(String l : TranslationHelper.getLanguagesForStmts(this.predicates)) {
                statementLanguageComboBox.addItem(l);
                questionLanguageComboBox.addItem(l);
            }*/
            
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void predicateListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_predicateListValueChanged
        
        if (evt.getValueIsAdjusting() == false) {

            // get value
            String selectedVal = (String)predicateList.getSelectedValue();
            selectedPred = findPredicate(selectedVal);
            
            if(selectedPred != null) {
                List<String> stmtLanguages = TranslationHelper.getLanguagesForStmt(selectedPred);
                statementLanguageComboBox.removeAllItems();
                for(String langVal : stmtLanguages) {
                    statementLanguageComboBox.addItem(languages.getLangRepresentation(langVal));
                }
                if(stmtLanguages.isEmpty()) {
                    statementLanguageComboBox.setSelectedIndex(-1);
                } else {
                    statementLanguageComboBox.setSelectedIndex(0);
                }
                updateStmt();


                // Question Tab 
                List<Question> questions = selectedPred.getQuestions();
                int qNr = questions.size();
                questionNrLabel.setText("# of Questions: "+Integer.toString(qNr));            
                questionArgComboBox.removeAllItems();
                for(Question q : questions) {
                    questionArgComboBox.addItem(q.getArg());
                }
                if(qNr == 0) {
                    questionArgComboBox.setSelectedIndex(-1);
                    selectedQuestion = null;
                } else {
                    questionArgComboBox.setSelectedIndex(0);
                    selectedQuestion = TranslationHelper.getQuestionForArg(selectedPred.getQuestions(), (Integer)questionArgComboBox.getSelectedItem());
                }            
                questionLanguageComboBox.removeAllItems();  
                if(selectedQuestion != null) {
                    List<String> questionLanguages = TranslationHelper.getLanguagesForQuestion(selectedQuestion);            
                    for(String lang : questionLanguages) {
                        questionLanguageComboBox.addItem(languages.getLangRepresentation(lang));
                    }
                    if(questionLanguages.isEmpty()) {
                        questionLanguageComboBox.setSelectedIndex(-1);
                    } else {
                        questionLanguageComboBox.setSelectedIndex(0);
                    }                
                }                
                updateQuestion();            

                updateMenuItems();

            } else {
                JOptionPane.showMessageDialog(null, "no predicate loaded for: "+selectedVal,"Warnung", JOptionPane.WARNING_MESSAGE);
                System.out.println("no predicate loaded for: "+selectedVal);
            }
        
        }
        
    }//GEN-LAST:event_predicateListValueChanged

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        
        int saveVal = fileChooser.showSaveDialog(this.getFrame());
        if(saveVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            this.getFrame().setTitle("TranslationGUI <"+f.getAbsolutePath()+">");
            TranslationExporter.exportTranslations(this.predicates, f);
        }
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void questionRefsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_questionRefsListValueChanged
        
        if((evt.getValueIsAdjusting() == false) && (selectedQuestion != null)) {
            
            // get selected ref
            String pred = (String)questionRefsList.getSelectedValue();
            List<QRef> refs = selectedQuestion.getRefs();
            selectedQRef = null;
            for(QRef r : refs) {
                if(r.getPred().equals(pred)) {
                    selectedQRef = r;
                    break;
                }
            }
            if(selectedQRef != null) {
                // update 
                questionRefArgSpinner.setEnabled(true);
                SpinnerModel spModel = new SpinnerNumberModel(selectedQRef.getArg(), 0, selectedPred.getArgs()-1, 1);
                questionRefArgSpinner.setModel(spModel);
                // questionRefArgSpinner.setValue(selectedQRef.getArg());
                DefaultListModel listModel = new DefaultListModel();
                for(Integer argNr : selectedQRef.getArgOrder()) {
                    listModel.addElement(argNr);
                }
                questionRefArgOrderList.setModel(listModel);
            } else {
                questionRefArgSpinner.setEnabled(false);
                questionRefArgOrderList.setModel(new DefaultListModel());
            }
            
        }
        
    }//GEN-LAST:event_questionRefsListValueChanged

    private void questionRefsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionRefsListMouseClicked
        if(evt.getClickCount() == 2) {
            String pred = (String)questionRefsList.getSelectedValue();
            predicateList.setSelectedValue(pred, true);
        }
    }//GEN-LAST:event_questionRefsListMouseClicked

    private void stmtLangMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stmtLangMenuItemActionPerformed
        
        // get available languages
        List<String> langRepr = languages.listAllLangRepresentations();
        for(String l : selectedPred.getFormatTextMap().keySet()) {
            langRepr.remove(languages.getLangRepresentation(l));
        }        
        Object[] availableLangs = new String[langRepr.size()];
        langRepr.toArray(availableLangs);
        String newLangRepr = (String) JOptionPane.showInputDialog(this.getFrame(), "New language: ("+Integer.toString(langRepr.size())+")", "New language for statement", JOptionPane.QUESTION_MESSAGE, null, availableLangs, availableLangs[0]);
        if (newLangRepr != null) {
            Map<String, FormatText> formatTextMap = selectedPred.getFormatTextMap();
            String newLangVal = languages.getLangValue(newLangRepr);
            System.out.println("new language: " + newLangVal + " " + newLangRepr);
            try {
                int args = selectedPred.getArgs();
                List<Integer> newArgs = new ArrayList<Integer>();
                StringBuilder newText = new StringBuilder();
                for (int i = 0; i < args; i++) {
                    newArgs.add(i);
                    newText.append("%s");
                }
                FormatText newFormText = new FormatText(newText.toString(), newArgs);
                formatTextMap.put(newLangVal, newFormText);
                statementLanguageComboBox.addItem(newLangRepr);
                statementLanguageComboBox.setSelectedItem(newLangRepr);
                updateStmt();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.getFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_stmtLangMenuItemActionPerformed

    private void statementArgsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_statementArgsListValueChanged
        if (evt.getValueIsAdjusting() == false) {
            stmtFormat();
        }
    }//GEN-LAST:event_statementArgsListValueChanged

    private void questionLangMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionLangMenuItemActionPerformed
        
        // get available languages
        List<String> langRepr = this.languages.listAllLangRepresentations();
        for(String l : selectedQuestion.getFormatTextMap().keySet()) {
            langRepr.remove(languages.getLangRepresentation(l));
        }
        Object[] availableLangs =  new String[langRepr.size()];
        langRepr.toArray(availableLangs);
        String newLangRepr = (String)JOptionPane.showInputDialog(this.getFrame(), "New language: ("+Integer.toString(langRepr.size())+")", "New language for question", JOptionPane.QUESTION_MESSAGE, null, availableLangs, availableLangs[0]);
        String newLangVal = languages.getLangValue(newLangRepr);

        if (newLangRepr != null) {
            Map<String, FormatText> formatTextMap = selectedQuestion.getFormatTextMap();
            System.out.println("new language: " + newLangVal + " " + newLangRepr);

            try {
                int args = selectedPred.getArgs();
                List<Integer> newArgs = new ArrayList<Integer>();
                StringBuilder newText = new StringBuilder();
                int qArg = selectedQuestion.getArg();
                for (int i = 0; i < args; i++) {
                    if (i != qArg) {
                        newArgs.add(i);
                        newText.append("%s");
                    }
                }
                FormatText newFormText = new FormatText(newText.toString(), newArgs);
                formatTextMap.put(newLangVal, newFormText);
                questionLanguageComboBox.addItem(newLangRepr);
                questionLanguageComboBox.setSelectedItem(newLangRepr);
                updateQuestion();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.getFrame(), e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_questionLangMenuItemActionPerformed

    private void addQuestionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestionMenuItemActionPerformed
        System.out.println(evt.getActionCommand());
        if(selectedPred != null) {
            int argsNr = selectedPred.getArgs();
            List<Question> questions = selectedPred.getQuestions();            
            Map<Integer, Question> qMap = new HashMap<Integer, Question>();
            for(Question q : questions){
                qMap.put(q.getArg(), q);
            }
            int availableNr = argsNr - questions.size();
            Integer[] availableArgs = new Integer[availableNr];
            int avPos = 0;
            for(int i=0; i<argsNr; i++) {
                if(!qMap.containsKey(i)) {
                    availableArgs[avPos] = i;
                    avPos++;
                }
            }
            Integer newQuestion = (Integer)JOptionPane.showInputDialog(this.getFrame(), "New question for argument:", "New question", JOptionPane.QUESTION_MESSAGE, null, availableArgs, availableArgs[0]);
            Question newQ = new Question(newQuestion, "text", "", "", new HashMap<String, FormatText>(), new ArrayList<String>(), new ArrayList<QRef>());
            selectedPred.getQuestions().add(newQ);
            selectedQuestion = newQ;           
            questionArgComboBox.removeAllItems();
            for(Question q : questions) {
                questionArgComboBox.addItem(q.getArg());
            }
            questionArgComboBox.setSelectedIndex(0);            
            questionLangMenuItem.setEnabled(true);
            questionNrLabel.setText("# of Questions: "+Integer.toString(selectedPred.getQuestions().size()));
            updateQuestion();
            updateMenuItems();
        }
    }//GEN-LAST:event_addQuestionMenuItemActionPerformed

    private void questionArgComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_questionArgComboBoxItemStateChanged
        if((ItemEvent.SELECTED == evt.getStateChange()) && (questionArgComboBox.isFocusOwner())) {
            if (selectedPred != null) {
                Object selectedItem = questionArgComboBox.getSelectedItem();
                if (selectedItem != null) {
                    int arg = (Integer) selectedItem;
                    selectedQuestion = TranslationHelper.getQuestionForArg(selectedPred.getQuestions(), arg);
                    questionLanguageComboBox.removeAllItems();
                    if((selectedQuestion != null) && (!selectedQuestion.getFormatTextMap().isEmpty())) {
                        for(String l : selectedQuestion.getFormatTextMap().keySet()) {
                            questionLanguageComboBox.addItem(languages.getLangRepresentation(l));
                        }
                        questionLanguageComboBox.setSelectedIndex(0);
                    } else {
                        questionLanguageComboBox.setSelectedIndex(-1);
                    }
                    updateQuestion();
                }
            }
        }
    }//GEN-LAST:event_questionArgComboBoxItemStateChanged

    private void questionLanguageComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_questionLanguageComboBoxItemStateChanged
        if((ItemEvent.SELECTED == evt.getStateChange()) && (questionLanguageComboBox.isFocusOwner())) {
            updateQuestion();
        }
    }//GEN-LAST:event_questionLanguageComboBoxItemStateChanged

    private void questionTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_questionTypeComboBoxItemStateChanged
        if((evt.getStateChange() == ItemEvent.SELECTED) && (questionTypeComboBox.isFocusOwner())&&(selectedQuestion != null)) {
            selectedQuestion.setType((String)questionTypeComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_questionTypeComboBoxItemStateChanged

    private void statementLanguageComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statementLanguageComboBoxItemStateChanged
        if((evt.getStateChange() == ItemEvent.SELECTED) && (statementLanguageComboBox.isFocusOwner())) { 
            updateStmt();
        }        
    }//GEN-LAST:event_statementLanguageComboBoxItemStateChanged

    private void addAnswerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnswerMenuItemActionPerformed
        if(selectedQuestion != null) {
            String a = JOptionPane.showInputDialog(this.getFrame(), "Add possible answer:", "Possible Answers", JOptionPane.QUESTION_MESSAGE);
            selectedQuestion.getAnswers().add(a);
            updateQuestion();
        }
    }//GEN-LAST:event_addAnswerMenuItemActionPerformed

    private void removeAnswerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAnswerMenuItemActionPerformed
        if((selectedQuestion != null) && (!questionAnswersList.isSelectionEmpty())) {
            String a = (String)questionAnswersList.getSelectedValue();
            selectedQuestion.getAnswers().remove(a);
            updateQuestion();
        }
    }//GEN-LAST:event_removeAnswerMenuItemActionPerformed

    private void addRefMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRefMenuItemActionPerformed
        if(selectedQuestion != null) {
            int predSize = predicates.size();            
            String[] predArray = new String[predSize];
            for(int i=0; i<predSize; i++) {
                predArray[i] = predicates.get(i).getPred();
            }
            String refPred = (String)JOptionPane.showInputDialog(this.getFrame(), "Add new question reference:", "Question Reference", JOptionPane.QUESTION_MESSAGE, null, predArray, predArray[0]);
            // Predicate pred = findPredicate(refPred);
            int argsSize = selectedPred.getArgs();
            int qArgNr = selectedQuestion.getArg();
            List<Integer> args = new ArrayList<Integer>();
            for(int i=0; i<argsSize; i++) {
                if(i != qArgNr) {
                    args.add(i);
                }
            }            
            QRef qref = new QRef(refPred, qArgNr, args);
            selectedQuestion.getRefs().add(qref);
            updateQuestion();
        }
    }//GEN-LAST:event_addRefMenuItemActionPerformed

    private void questionArgsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_questionArgsListValueChanged
        if(evt.getValueIsAdjusting() == false) {
            questionFormat();
        }
    }//GEN-LAST:event_questionArgsListValueChanged

    private void questionRefArgOrderListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_questionRefArgOrderListValueChanged
        if(evt.getValueIsAdjusting() == false) {
            refUpdate();
        }
    }//GEN-LAST:event_questionRefArgOrderListValueChanged

    private void questionRefArgSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_questionRefArgSpinnerStateChanged
        if(selectedQRef != null) {
            int a = (Integer)questionRefArgSpinner.getValue();
            DefaultListModel listModel = new DefaultListModel();
            List<Integer> args = new ArrayList<Integer>();
            for(Integer i=0; i<selectedPred.getArgs(); i++) {
                if(i != a) {
                    listModel.addElement(i);
                    args.add(i);
                }
            }
            questionRefArgOrderList.setModel(listModel);
            selectedQRef.setArg(a);
            selectedQRef.setArgOrder(args);
        }
    }//GEN-LAST:event_questionRefArgSpinnerStateChanged

    private void removeRefMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRefMenuItemActionPerformed
        if(selectedQuestion != null) {
            String pred = (String)questionRefsList.getSelectedValue();
            List<QRef> refs = selectedQuestion.getRefs();
            QRef toRemove = null;
            for(QRef r : refs) {
                if(r.getPred().equals(pred)) {
                    toRemove = r;
                    break;
                }
            }
            refs.remove(toRemove);
            updateQuestion();
        }
    }//GEN-LAST:event_removeRefMenuItemActionPerformed

    private void addPredicateMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPredicateMenuItemActionPerformed
        String newPred = JOptionPane.showInputDialog(this.getFrame(), "New predicate name:", "Add Predicate", JOptionPane.QUESTION_MESSAGE);
        String newArgsString = (String)JOptionPane.showInputDialog(this.getFrame(), "Number of arguments:", "Statement Arguments", JOptionPane.QUESTION_MESSAGE, null, null, "2");
        try {
            int args = Integer.parseInt(newArgsString);
            Predicate p = new Predicate(newPred, args, new HashMap<String, FormatText>(), new ArrayList<Question>());
            predicates.add(p);
            ((DefaultListModel)predicateList.getModel()).addElement(newPred);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this.getFrame(), "Not a number: "+newArgsString, "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_addPredicateMenuItemActionPerformed

    // DocumentListener methods
    public void insertUpdate(DocumentEvent ev) {
        handleDocUpdate(ev);
    }
    
    public void removeUpdate(DocumentEvent ev) {
        handleDocUpdate(ev);
    }
    
    public void changedUpdate(DocumentEvent ev) {
        // handleDocUpdate(ev);
    }
    
    private void handleDocUpdate(DocumentEvent ev) {
        if(ev.getDocument().equals(this.stmtDoc)) {
            stmtFormat();
        } else if (ev.getDocument().equals(this.questionDoc)) {
            questionFormat();
        } else if (ev.getDocument().equals(this.hintDoc)) {
            if(selectedQuestion != null) {
                selectedQuestion.setHint(questionHintTextArea.getText());
            }            
        } else if(ev.getDocument().equals(this.categoryDoc)) {
            if(selectedQuestion != null) {
                selectedQuestion.setCategory(questionCategoryTextField.getText());
            }
        } else {
            System.out.println("unknown document: " + ev.getDocument().toString());
        }
    }
    
    private void stmtFormat() {
        String f = "";
        try {
            DefaultListModel listModel = (DefaultListModel)statementArgsList.getModel();            
            String formText = statementFormatTextField.getText();
            String stmtLangRepr = (String)statementLanguageComboBox.getSelectedItem();
            String stmtLangVal = languages.getLangValue(stmtLangRepr);
            FormatText formatText = selectedPred.getFormatTextMap().get(stmtLangVal);
            formatText.setText(formText); 
            List<Integer> argsList = new ArrayList<Integer>();
            for(Object o : listModel.toArray()) {
                argsList.add((Integer)o);
            }
            formatText.setArgOder(argsList);
            f = String.format(formText, listModel.toArray());
        } catch (Exception e) {
            f = "Error: " + e.toString();
        } finally {
            statementFormatStringLabel.setText(f);
        }
    }
    
    private void questionFormat() {
        String f = "";
        try {
            DefaultListModel listModel = (DefaultListModel)questionArgsList.getModel();            
            String formText = questionFormatTextField.getText();
            String questionLangRepr = (String)questionLanguageComboBox.getSelectedItem();
            String questionLangVal = languages.getLangValue(questionLangRepr);
            FormatText formatText = selectedQuestion.getFormatTextMap().get(questionLangVal);
            formatText.setText(formText);
            f = String.format(formText, listModel.toArray());
        } catch (Exception e) {
            f = "Error: " + e.toString();
        } finally {
            questionFormatStringLabel.setText(f);
        }
    }
    
    private void refUpdate() {
        DefaultListModel listModel = (DefaultListModel)questionRefArgOrderList.getModel();
        List<Integer> argsList = new ArrayList<Integer>();
        for(int i=0; i<listModel.getSize(); i++) {
            Integer a = (Integer)listModel.getElementAt(i);
            argsList.add(a);
        }
        selectedQRef.setArgOrder(argsList);
    }
    
    private void updateQuestion() {
        System.out.println("updateQuestion(): "+selectedQuestion);
        if (selectedQuestion != null) { 
            // language
            String questionLangRepr = (String)questionLanguageComboBox.getSelectedItem();
            if(questionLangRepr != null) {
                String questionLangVal = languages.getLangValue(questionLangRepr);
                FormatText questionFormText = selectedQuestion.getFormatTextMap().get(questionLangVal);            
                DefaultListModel listModel = new DefaultListModel();
                for (Integer i : questionFormText.getArgOder()) {
                    listModel.addElement(i);
                }
                questionArgsList.setModel(listModel);
                questionFormatTextField.setText(questionFormText.getText());                
            } else {
                // no language
                questionLanguageComboBox.removeAllItems();        
                questionFormatTextField.setText("");
                questionArgsList.setModel(new DefaultListModel());            
            }
            // category
            questionCategoryTextField.setText(selectedQuestion.getCategory());
            // hint
            questionHintTextArea.setText(selectedQuestion.getHint());
            // type
            questionTypeComboBox.setSelectedItem(selectedQuestion.getType());
            // args
            //((TitledBorder)questionArgPanel.getBorder()).setTitle("Argument ("+Integer.toString(selectedPred.getArgs())+")");
            // answers
            DefaultListModel listModel = new DefaultListModel();
            for(String s : selectedQuestion.getAnswers()) {
                listModel.addElement(s);            }            
            questionAnswersList.setModel(listModel);
            // refs
            List<QRef> refs = selectedQuestion.getRefs();
            listModel = new DefaultListModel();
            for(QRef ref : refs) {
                listModel.addElement(ref.getPred());
            }
            questionRefsList.setModel(listModel);
            questionRefArgSpinner.setEnabled(false);
            questionRefArgOrderList.setModel(new DefaultListModel());
        } else {
            // no question
            questionArgComboBox.removeAllItems();
            questionLanguageComboBox.removeAllItems();        
            questionFormatTextField.setText("");
            questionArgsList.setModel(new DefaultListModel());
            questionCategoryTextField.setText("");
            questionHintTextArea.setText("");
            // ((TitledBorder)questionArgPanel.getBorder()).setTitle("Argument");
            questionAnswersList.setModel(new DefaultListModel());
            questionRefsList.setModel(new DefaultListModel());
        }
    }
    
    private void updateStmt() {        
        if(selectedPred != null) {
            String stmtLangRepr = (String) statementLanguageComboBox.getSelectedItem();           
            if(stmtLangRepr != null) {
                int argsNr = selectedPred.getArgs();
                String stmtLangVal = languages.getLangValue(stmtLangRepr);
                FormatText stmtFormText = selectedPred.getFormatTextMap().get(stmtLangVal);                
                DefaultListModel listModel = new DefaultListModel();
                for (Integer i : stmtFormText.getArgOder()) {
                    listModel.addElement(i);
                }
                statementArgsList.setModel(listModel);
                statementFormatTextField.setText(stmtFormText.getText());
                statementArgsLabel.setText("Argument Order: (" + Integer.toString(argsNr) + ")");
            } else {
                statementFormatTextField.setText("");
                statementArgsLabel.setText("Argument Order:");
                statementArgsList.setModel(new DefaultListModel());
            }
        } else {
            statementLanguageComboBox.removeAllItems();
            statementFormatTextField.setText("");
            statementArgsLabel.setText("Argument Order:");
            statementArgsList.setModel(new DefaultListModel());
        }
    }
   
    private void updateMenuItems() {
        if (selectedPred != null) {
            
            if(selectedPred.getFormatTextMap().size() == languages.size()) {
                stmtLangMenuItem.setEnabled(false);
            }else {
                stmtLangMenuItem.setEnabled(true);
            }
            
            int qNr = selectedPred.getQuestions().size();
            
            if (qNr == 0) {
                questionLangMenuItem.setEnabled(false);
            } else {
                if((selectedQuestion != null) && (selectedQuestion.getFormatTextMap().size() < languages.size())) {
                    questionLangMenuItem.setEnabled(true);
                } else {
                    questionLangMenuItem.setEnabled(false);
                }
            }
            
            if (selectedPred.getArgs() == qNr) {
                addQuestionMenuItem.setEnabled(false);
            } else {
                addQuestionMenuItem.setEnabled(true);
            }

        } else {
            stmtLangMenuItem.setEnabled(false);                        
            questionLangMenuItem.setEnabled(false);
            addQuestionMenuItem.setEnabled(false);            
        }
    }


    private Predicate findPredicate(String pred) {
        Predicate r = null;
        for(Predicate p : predicates) {
            if(p.getPred().equals(pred)) {
                return p;
            }
        }
        return r;
    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane PredicateTabbedPane;
    private javax.swing.JMenuItem addAnswerMenuItem;
    private javax.swing.JMenuItem addPredicateMenuItem;
    private javax.swing.JMenuItem addQuestionMenuItem;
    private javax.swing.JMenuItem addRefMenuItem;
    private javax.swing.JPanel answersPanel;
    private javax.swing.JScrollPane answersScrollPane;
    private javax.swing.JPanel categoryPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel hintPanel;
    private javax.swing.JScrollPane hintScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPanel leftSidePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JSplitPane mainSplitPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JList predicateList;
    private javax.swing.JScrollPane predicateScrollPane;
    private javax.swing.JCheckBox predicatesNamespacesCheckBox;
    private javax.swing.JPopupMenu predicatesPopupMenu;
    private javax.swing.JList questionAnswersList;
    private javax.swing.JPopupMenu questionAnswersPopupMenu;
    private javax.swing.JComboBox questionArgComboBox;
    private javax.swing.JPanel questionArgPanel;
    private javax.swing.JLabel questionArgsLabel;
    private javax.swing.JList questionArgsList;
    private javax.swing.JScrollPane questionArgsOrderScrollPane;
    private javax.swing.JTextField questionCategoryTextField;
    private javax.swing.JLabel questionFormatLabel;
    private javax.swing.JPanel questionFormatPanel;
    private javax.swing.JLabel questionFormatStringLabel;
    private javax.swing.JTextField questionFormatTextField;
    private javax.swing.JTextArea questionHintTextArea;
    private javax.swing.JMenuItem questionLangMenuItem;
    private javax.swing.JComboBox questionLanguageComboBox;
    private javax.swing.JLabel questionNrLabel;
    private javax.swing.JLabel questionRefArgLabel;
    private javax.swing.JList questionRefArgOrderList;
    private javax.swing.JSpinner questionRefArgSpinner;
    private javax.swing.JLabel questionRefsArgOrderjLabel2;
    private javax.swing.JList questionRefsList;
    private javax.swing.JPopupMenu questionRefsPopupMenu;
    private javax.swing.JComboBox questionTypeComboBox;
    private javax.swing.JPanel questionsPanel;
    private javax.swing.JScrollPane refsArgScrollPane;
    private javax.swing.JPanel refsPanel;
    private javax.swing.JScrollPane refsScrollPane;
    private javax.swing.JMenuItem removeAnswerMenuItem;
    private javax.swing.JMenuItem removePredicateMenuItem;
    private javax.swing.JMenuItem removeRefMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel statementArgsLabel;
    private javax.swing.JList statementArgsList;
    private javax.swing.JLabel statementFormatLabel;
    private javax.swing.JLabel statementFormatStringLabel;
    private javax.swing.JTextField statementFormatTextField;
    private javax.swing.JComboBox statementLanguageComboBox;
    private javax.swing.JLabel statementLanguageLabel;
    private javax.swing.JPanel statementPanel;
    private javax.swing.JMenuItem stmtLangMenuItem;
    private javax.swing.JPanel typePanel;
    // End of variables declaration//GEN-END:variables

    // GUI stuff
    private JDialog aboutBox;
    private final JFileChooser fileChooser;
    
    // Model stuff
    List<Predicate> predicates = null;
    Predicate selectedPred = null;
    Question selectedQuestion = null;
    QRef selectedQRef = null;
    Document stmtDoc = null;
    Document questionDoc = null;
    Document hintDoc = null;
    Document categoryDoc = null;
    Languages languages = new Languages();

}